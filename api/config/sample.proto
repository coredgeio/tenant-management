// Copyright 2025, Coredge.io Inc.
// All Rights reserved.
//
// Author Akash Sharma (akash.sharma@coredge.io)

syntax = "proto3";

package config;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/coredgeio/ai-orchestrator/api/config";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0"
    title: "AI/ML orchestrator API spec"
  }
  external_docs: {
    description: "AI/ML orchestrator API spec, sample"
  }
};

service SampleApi {
  // hello world
  rpc HelloWorld(HelloWorldReq) returns (HelloWorldResp) {
    option (google.api.http) = {
      get: "/v1/project/{project}"
    };
  }
}

message HelloWorldReq {
  // project, url argument for mandatory parameters usually forming key fields
  // for API
  string project = 1;

  // query parameter following type match requirements
  int32 offset = 2;

  // string query parameter
  string text = 3;
}

message HelloWorldResp {
  // project in respose message
  string project = 1;

  // returing the query offset
  int32 offset = 2;

  // returning the string query parameter
  string text = 3;
}