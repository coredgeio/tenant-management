// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TenantMgmtApiClient is the client API for TenantMgmtApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantMgmtApiClient interface {
	// get tenant level kyc status
	GetTenantKycStatus(ctx context.Context, in *GenericStatusReq, opts ...grpc.CallOption) (*TenantKycStatusResp, error)
	// get tenant user level kyc status
	GetTenantUserKycStatus(ctx context.Context, in *GenericStatusReq, opts ...grpc.CallOption) (*TenantUserKycStatusResp, error)
	// get payment configuration status
	GetPaymentConfigStatus(ctx context.Context, in *GenericStatusReq, opts ...grpc.CallOption) (*PaymentConfigStatusResp, error)
	// get tenant type
	GetTenantType(ctx context.Context, in *GenericStatusReq, opts ...grpc.CallOption) (*TenantTypeResp, error)
}

type tenantMgmtApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantMgmtApiClient(cc grpc.ClientConnInterface) TenantMgmtApiClient {
	return &tenantMgmtApiClient{cc}
}

func (c *tenantMgmtApiClient) GetTenantKycStatus(ctx context.Context, in *GenericStatusReq, opts ...grpc.CallOption) (*TenantKycStatusResp, error) {
	out := new(TenantKycStatusResp)
	err := c.cc.Invoke(ctx, "/config.TenantMgmtApi/GetTenantKycStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantMgmtApiClient) GetTenantUserKycStatus(ctx context.Context, in *GenericStatusReq, opts ...grpc.CallOption) (*TenantUserKycStatusResp, error) {
	out := new(TenantUserKycStatusResp)
	err := c.cc.Invoke(ctx, "/config.TenantMgmtApi/GetTenantUserKycStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantMgmtApiClient) GetPaymentConfigStatus(ctx context.Context, in *GenericStatusReq, opts ...grpc.CallOption) (*PaymentConfigStatusResp, error) {
	out := new(PaymentConfigStatusResp)
	err := c.cc.Invoke(ctx, "/config.TenantMgmtApi/GetPaymentConfigStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantMgmtApiClient) GetTenantType(ctx context.Context, in *GenericStatusReq, opts ...grpc.CallOption) (*TenantTypeResp, error) {
	out := new(TenantTypeResp)
	err := c.cc.Invoke(ctx, "/config.TenantMgmtApi/GetTenantType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantMgmtApiServer is the server API for TenantMgmtApi service.
// All implementations must embed UnimplementedTenantMgmtApiServer
// for forward compatibility
type TenantMgmtApiServer interface {
	// get tenant level kyc status
	GetTenantKycStatus(context.Context, *GenericStatusReq) (*TenantKycStatusResp, error)
	// get tenant user level kyc status
	GetTenantUserKycStatus(context.Context, *GenericStatusReq) (*TenantUserKycStatusResp, error)
	// get payment configuration status
	GetPaymentConfigStatus(context.Context, *GenericStatusReq) (*PaymentConfigStatusResp, error)
	// get tenant type
	GetTenantType(context.Context, *GenericStatusReq) (*TenantTypeResp, error)
	mustEmbedUnimplementedTenantMgmtApiServer()
}

// UnimplementedTenantMgmtApiServer must be embedded to have forward compatible implementations.
type UnimplementedTenantMgmtApiServer struct {
}

func (UnimplementedTenantMgmtApiServer) GetTenantKycStatus(context.Context, *GenericStatusReq) (*TenantKycStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantKycStatus not implemented")
}
func (UnimplementedTenantMgmtApiServer) GetTenantUserKycStatus(context.Context, *GenericStatusReq) (*TenantUserKycStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantUserKycStatus not implemented")
}
func (UnimplementedTenantMgmtApiServer) GetPaymentConfigStatus(context.Context, *GenericStatusReq) (*PaymentConfigStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentConfigStatus not implemented")
}
func (UnimplementedTenantMgmtApiServer) GetTenantType(context.Context, *GenericStatusReq) (*TenantTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantType not implemented")
}
func (UnimplementedTenantMgmtApiServer) mustEmbedUnimplementedTenantMgmtApiServer() {}

// UnsafeTenantMgmtApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantMgmtApiServer will
// result in compilation errors.
type UnsafeTenantMgmtApiServer interface {
	mustEmbedUnimplementedTenantMgmtApiServer()
}

func RegisterTenantMgmtApiServer(s grpc.ServiceRegistrar, srv TenantMgmtApiServer) {
	s.RegisterService(&TenantMgmtApi_ServiceDesc, srv)
}

func _TenantMgmtApi_GetTenantKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantMgmtApiServer).GetTenantKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.TenantMgmtApi/GetTenantKycStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantMgmtApiServer).GetTenantKycStatus(ctx, req.(*GenericStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantMgmtApi_GetTenantUserKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantMgmtApiServer).GetTenantUserKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.TenantMgmtApi/GetTenantUserKycStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantMgmtApiServer).GetTenantUserKycStatus(ctx, req.(*GenericStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantMgmtApi_GetPaymentConfigStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantMgmtApiServer).GetPaymentConfigStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.TenantMgmtApi/GetPaymentConfigStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantMgmtApiServer).GetPaymentConfigStatus(ctx, req.(*GenericStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantMgmtApi_GetTenantType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantMgmtApiServer).GetTenantType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.TenantMgmtApi/GetTenantType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantMgmtApiServer).GetTenantType(ctx, req.(*GenericStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantMgmtApi_ServiceDesc is the grpc.ServiceDesc for TenantMgmtApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantMgmtApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.TenantMgmtApi",
	HandlerType: (*TenantMgmtApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenantKycStatus",
			Handler:    _TenantMgmtApi_GetTenantKycStatus_Handler,
		},
		{
			MethodName: "GetTenantUserKycStatus",
			Handler:    _TenantMgmtApi_GetTenantUserKycStatus_Handler,
		},
		{
			MethodName: "GetPaymentConfigStatus",
			Handler:    _TenantMgmtApi_GetPaymentConfigStatus_Handler,
		},
		{
			MethodName: "GetTenantType",
			Handler:    _TenantMgmtApi_GetTenantType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenant-mgmt.proto",
}
