// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: kyc_kyb.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TenantManagement_GetTenantUserLevelKycStatus_FullMethodName = "/config.TenantManagement/GetTenantUserLevelKycStatus"
	TenantManagement_GetTenantLevelKCStatus_FullMethodName      = "/config.TenantManagement/GetTenantLevelKCStatus"
)

// TenantManagementClient is the client API for TenantManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantManagementClient interface {
	GetTenantUserLevelKycStatus(ctx context.Context, in *TenantUserLevelKycGetReq, opts ...grpc.CallOption) (*TenantUserLevelKycResp, error)
	GetTenantLevelKCStatus(ctx context.Context, in *TenantLevelKCGetReq, opts ...grpc.CallOption) (*TenantLevelKCResp, error)
}

type tenantManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantManagementClient(cc grpc.ClientConnInterface) TenantManagementClient {
	return &tenantManagementClient{cc}
}

func (c *tenantManagementClient) GetTenantUserLevelKycStatus(ctx context.Context, in *TenantUserLevelKycGetReq, opts ...grpc.CallOption) (*TenantUserLevelKycResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantUserLevelKycResp)
	err := c.cc.Invoke(ctx, TenantManagement_GetTenantUserLevelKycStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManagementClient) GetTenantLevelKCStatus(ctx context.Context, in *TenantLevelKCGetReq, opts ...grpc.CallOption) (*TenantLevelKCResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantLevelKCResp)
	err := c.cc.Invoke(ctx, TenantManagement_GetTenantLevelKCStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantManagementServer is the server API for TenantManagement service.
// All implementations must embed UnimplementedTenantManagementServer
// for forward compatibility.
type TenantManagementServer interface {
	GetTenantUserLevelKycStatus(context.Context, *TenantUserLevelKycGetReq) (*TenantUserLevelKycResp, error)
	GetTenantLevelKCStatus(context.Context, *TenantLevelKCGetReq) (*TenantLevelKCResp, error)
	mustEmbedUnimplementedTenantManagementServer()
}

// UnimplementedTenantManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTenantManagementServer struct{}

func (UnimplementedTenantManagementServer) GetTenantUserLevelKycStatus(context.Context, *TenantUserLevelKycGetReq) (*TenantUserLevelKycResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantUserLevelKycStatus not implemented")
}
func (UnimplementedTenantManagementServer) GetTenantLevelKCStatus(context.Context, *TenantLevelKCGetReq) (*TenantLevelKCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantLevelKCStatus not implemented")
}
func (UnimplementedTenantManagementServer) mustEmbedUnimplementedTenantManagementServer() {}
func (UnimplementedTenantManagementServer) testEmbeddedByValue()                          {}

// UnsafeTenantManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantManagementServer will
// result in compilation errors.
type UnsafeTenantManagementServer interface {
	mustEmbedUnimplementedTenantManagementServer()
}

func RegisterTenantManagementServer(s grpc.ServiceRegistrar, srv TenantManagementServer) {
	// If the following call pancis, it indicates UnimplementedTenantManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TenantManagement_ServiceDesc, srv)
}

func _TenantManagement_GetTenantUserLevelKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUserLevelKycGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManagementServer).GetTenantUserLevelKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManagement_GetTenantUserLevelKycStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManagementServer).GetTenantUserLevelKycStatus(ctx, req.(*TenantUserLevelKycGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManagement_GetTenantLevelKCStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantLevelKCGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManagementServer).GetTenantLevelKCStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManagement_GetTenantLevelKCStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManagementServer).GetTenantLevelKCStatus(ctx, req.(*TenantLevelKCGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantManagement_ServiceDesc is the grpc.ServiceDesc for TenantManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.TenantManagement",
	HandlerType: (*TenantManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenantUserLevelKycStatus",
			Handler:    _TenantManagement_GetTenantUserLevelKycStatus_Handler,
		},
		{
			MethodName: "GetTenantLevelKCStatus",
			Handler:    _TenantManagement_GetTenantLevelKCStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyc_kyb.proto",
}
